{"version":3,"file":"index.esm.js","sources":["../src/components/App.js","../src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nconst GET_USERS = gql`\r\n  query($search: String, $sort: [UserSort], $perPage: Int, $page: Int) {\r\n    Page(perPage: $perPage, page: $page) {\r\n      users(search: $search, sort: $sort) {\r\n        id\r\n        name\r\n      }\r\n      pageInfo {\r\n        total\r\n        currentPage\r\n        lastPage\r\n        hasNextPage\r\n        perPage\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  const [page, setCurrentPage] = useState(1);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const nextPage = React.useCallback(() => {\r\n    setCurrentPage((p) => p + 1);\r\n  }, []);\r\n\r\n  const prevPage = React.useCallback(() => {\r\n    setCurrentPage((p) => p - 1);\r\n  }, []);\r\n\r\n  const handleChange = React.useCallback((e) => setSearch(e.target.value), []);\r\n\r\n  const { loading, data } = useQuery(GET_USERS, {\r\n    variables: {\r\n      search,\r\n      sort: \"USERNAME_DESC\",\r\n      page,\r\n      perPage: 20,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <span style={{ paddingRight: \"10px\" }}>Search user</span>\r\n        <input type=\"text\" value={search} onChange={handleChange} />\r\n        <button onClick={() => prevPage()} disabled={page <= 1 || loading}>\r\n          prev\r\n        </button>\r\n        <button\r\n          onClick={() => nextPage()}\r\n          disabled={!data?.Page?.pageInfo.hasNextPage || loading}\r\n        >\r\n          next\r\n        </button>\r\n      </div>\r\n      {loading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n        <div>\r\n          {data?.Page?.users.map((user) => {\r\n            return (\r\n              <div key={user.id}>\r\n                {user.id}: {user.name}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport React from \"react\";\nimport App from \"./components/App\";\n\nconst client = new ApolloClient({\n  uri: \"https://graphql.anilist.co\",\n  cache: new InMemoryCache({\n    addTypename: false,\n  }),\n});\n\nexport const SampleSearch = () => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n"],"names":["GET_USERS","gql","App","useState","page","setCurrentPage","search","setSearch","nextPage","React","useCallback","p","prevPage","handleChange","e","target","value","useQuery","variables","sort","perPage","loading","data","Fragment","style","marginBottom","paddingRight","type","onChange","onClick","disabled","Page","_data$Page","pageInfo","hasNextPage","_data$Page2","users","map","user","key","id","name","client","ApolloClient","uri","cache","InMemoryCache","addTypename","SampleSearch","ApolloProvider"],"mappings":"6jDAGA,IAAMA,EAAYC,OAkBZC,EAAM,uBACqBC,EAAS,MAAjCC,OAAMC,WACeF,EAAS,OAA9BG,OAAQC,OAETC,EAAWC,EAAMC,aAAY,WACjCL,GAAe,SAACM,UAAMA,EAAI,OACzB,IAEGC,EAAWH,EAAMC,aAAY,WACjCL,GAAe,SAACM,UAAMA,EAAI,OACzB,IAEGE,EAAeJ,EAAMC,aAAY,SAACI,UAAMP,EAAUO,EAAEC,OAAOC,SAAQ,MAE/CC,EAASjB,EAAW,CAC5CkB,UAAW,CACTZ,OAAAA,EACAa,KAAM,gBACNf,KAAAA,EACAgB,QAAS,MALLC,IAAAA,QAASC,IAAAA,YAUfb,gBAACA,EAAMc,cACLd,uBAAKe,MAAO,CAAEC,aAAc,SAC1BhB,wBAAMe,MAAO,CAAEE,aAAc,wBAC7BjB,yBAAOkB,KAAK,OAAOX,MAAOV,EAAQsB,SAAUf,IAC5CJ,0BAAQoB,QAAS,kBAAMjB,KAAYkB,SAAU1B,GAAQ,GAAKiB,WAG1DZ,0BACEoB,QAAS,kBAAMrB,KACfsB,WAAWR,MAAAA,aAAAA,EAAMS,mBAANC,EAAYC,SAASC,cAAeb,YAKlDA,EACC,aAEAZ,2BACGa,MAAAA,aAAAA,EAAMS,yBAANI,EAAYC,MAAMC,KAAI,SAACC,UAEpB7B,uBAAK8B,IAAKD,EAAKE,IACZF,EAAKE,QAAMF,EAAKG,YC9D3BC,EAAS,IAAIC,EAAa,CAC9BC,IAAK,6BACLC,MAAO,IAAIC,EAAc,CACvBC,aAAa,MAIJC,EAAe,kBAExBvC,gBAACwC,GAAeP,OAAQA,GACtBjC,gBAACP"}